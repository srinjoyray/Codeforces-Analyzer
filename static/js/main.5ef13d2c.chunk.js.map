{"version":3,"sources":["components/Header/Header.js","components/VersusRatingGraph/VersusRatingGraph.js","components/VersusCommonContest/VersusCommonContest.js","components/VersusProblemIndexGraph/VersusProblemIndexGraph.js","components/VersusProblemRatingGraph/VersusProblemRatingGraph.js","components/VersusUser/VersusUserInfo.js","components/VersusUser/VersusUserContest.js","components/VersusSubmissionsCompare/VersusSubmissionsCompare.js","components/VersusCommonContest/VersusCommonPie.js","components/Footer/Footer.js","pages/Versus.js","components/UserBio/UserInfo.js","components/UserBio/UserContest.js","components/ProblemVerdict/ProblemVerdict.js","components/ProblemLanguage/ProblemLanguage.js","components/RatingGraph/RatingGraph.js","components/ProblemTagsGraph/ProblemTagsGraph.js","components/ProblemRatingGraph/ProblemRatingGraph.js","components/ProblemIndexGraph/ProblemIndexGraph.js","pages/SingleUser.js","App.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","title","btn","marginRight","fontSize","color","navLink","textDecoration","active","backgroundColor","Header","classes","className","AppBar","position","Toolbar","Typography","variant","exact","to","Button","VersusRatingGraph","userContest1","userContest2","datesMap","Map","datesMap1","datesMap2","data","labels","datasets","label","length","handle","fill","borderColor","Array","from","i","dateSeconds","ratingUpdateTimeSeconds","rating","newRating","set","datesMapAsc","entries","sort","key","date","Date","setTime","momentDate","moment","format","push","has","get","options","scales","y","beginAtZero","xAxes","type","time","month","plugins","display","text","animation","duration","responsive","maintainAspectRatio","spanGaps","height","width","container","one","two","draw","VersusCommonContest","username1","username2","contest1","contestId","rows","name","contestName","user1","rank","user2","diff","reverse","useState","page","setPage","rowsPerPage","setRowsPerPage","columns","id","minWidth","align","Paper","TableContainer","Table","stickyHeader","aria-label","TableHead","TableRow","map","column","TableCell","style","TableBody","slice","row","component","scope","Math","abs","TablePagination","rowsPerPageOptions","count","onChangePage","event","newPage","onChangeRowsPerPage","target","value","VersusProblemIndexGraph","userSubmissions1","userSubmissions2","index","index1","id1","verdict","key1","problem","currIndex1","temp","index2","id2","key2","currIndex2","borderWidth","indexAsc","yAxes","ticks","VersusProblemRatingGraph","rating1","currRating1","undefined","parseInt","rating2","currRating2","ratingAsc","table","VersusUserInfo","userInfo1","userInfo2","name1","firstName","lastName","country1","country","maxRating1","maxRating","maxRank","contribution1","contribution","name2","country2","maxRating2","contribution2","splice","data1","data2","VersusUserContest","bestRank1","min","apply","item","worstRank1","max","maxUp1","oldRating","maxDown1","bestRank2","worstRank2","maxUp2","maxDown2","VersusSubmissionsCompare","tried1","solved1","submissions1","tried2","solved2","submissions2","size","VersusCommonPie","legend","Footer","href","Versus","currname1","setCurrname1","setUsername1","setUserInfo1","setUserContest1","setUserSubmissions1","currname2","setCurrname2","setUsername2","setUserInfo2","setUserContest2","setUserSubmissions2","fetchItemsVersus","a","axios","resultUI1","user","result","resultUI2","resultUC1","resultUC2","resultUS1","resultUS2","handleSubmitVersus","e","preventDefault","console","log","noValidate","autoComplete","onSubmit","TextField","onChange","render","UserInfo","userInfo","username","UserContest","userContest","bestRank","worstRank","maxUp","maxDown","ProblemVerdict","userSubmissions","ac","tle","wa","rte","others","datalabels","borderRadius","font","ProblemLanguage","lang","currLang","programmingLanguage","langDsc","b","RatingGraph","x","ProblemTagsGraph","tag","currTag","tags","j","tagDsc","ProblemRatingGraph","currRating","IndexGraph","currIndex","SingleUser","currname","setCurrname","setUsername","setUserInfo","setUserContest","setUserSubmissions","fetchItems","resultUI","resultUC","resultUS","handleSubmit","ProblemIndexGraph","App","path","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5ef13d2c.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        \r\n    },\r\n    menuButton: {\r\n        // marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n        // fontSize:12 rem\r\n    },\r\n    btn: {\r\n        marginRight: 20,\r\n        fontSize: 12,\r\n        color: 'white',\r\n    },\r\n    navLink : {\r\n        textDecoration : 'none',\r\n    },\r\n    active: {\r\n        backgroundColor: 'red',\r\n        textDecoration : 'none',\r\n    },\r\n}));\r\n\r\nconst Header = () => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        Codeforces Analyzer\r\n                    </Typography>\r\n                    <Link exact to=\"/\" className={classes.navLink}>\r\n                        <Button color=\"inherit\" className={classes.btn}>\r\n                            <PersonIcon />\r\n                            Single User\r\n                        </Button>\r\n                    </Link>\r\n                    <Link exact to=\"/versus\"  className={classes.navLink}> \r\n                        <Button color=\"inherit\" className={classes.btn}>\r\n                            <PeopleIcon />\r\n                            Versus\r\n                        </Button>\r\n                    </Link>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import { Line } from 'react-chartjs-2';\r\nimport moment from 'moment';\r\n\r\nconst VersusRatingGraph = ({userContest1,userContest2}) => {\r\n    let datesMap= new Map();\r\n    let datesMap1= new Map();\r\n    let datesMap2=new Map();\r\n\r\n    let username1 = userContest1.length>0 ? userContest1[0].handle : '';\r\n    let username2 = userContest2.length>0 ? userContest2[0].handle : '';\r\n\r\n    const data = {\r\n        labels: [],\r\n        datasets: [\r\n          {\r\n            label: username1,\r\n            data: [],\r\n            fill: false,\r\n            backgroundColor: 'red',\r\n            borderColor: 'rgba(255,0,0,0.2)',\r\n          },\r\n          {\r\n            label: username2,\r\n            data: [],\r\n            fill: false,\r\n            backgroundColor: 'blue',\r\n            borderColor: 'rgba(25,25,112, 0.2)',\r\n          }\r\n        ],\r\n    };\r\n\r\n    \r\n    userContest1 = Array.from(userContest1);  \r\n    for(let i=0;i<userContest1.length;i++){    \r\n        let dateSeconds=userContest1[i].ratingUpdateTimeSeconds;\r\n        let rating=userContest1[i].newRating;\r\n        \r\n        datesMap.set(dateSeconds,1);\r\n        datesMap1.set(dateSeconds,rating);\r\n    }\r\n  \r\n    userContest2 = Array.from(userContest2);  \r\n    for(let i=0;i<userContest2.length;i++){    \r\n        let dateSeconds=userContest2[i].ratingUpdateTimeSeconds;\r\n        let rating=userContest2[i].newRating;\r\n        \r\n        datesMap.set(dateSeconds,1);\r\n        datesMap2.set(dateSeconds,rating);\r\n    }\r\n\r\n    var datesMapAsc = new Map([...datesMap.entries()].sort());\r\n\r\n    for(let[key,value] of datesMapAsc){\r\n      var date = new Date(null);\r\n      date.setTime(key*1000);\r\n      let momentDate = moment(date).format('MMM D, YYYY');\r\n      data.labels.push(momentDate);  \r\n      if(datesMap1.has(key)){\r\n        let rating=datesMap1.get(key);\r\n        data.datasets[0].data.push(rating);\r\n      }\r\n      else{\r\n        data.datasets[0].data.push(null);\r\n      }\r\n      if(datesMap2.has(key)){\r\n        let rating=datesMap2.get(key);\r\n        data.datasets[1].data.push(rating);\r\n      }\r\n      else{\r\n        data.datasets[1].data.push(null);\r\n      }\r\n    }\r\n\r\n    const options = {\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true\r\n          },\r\n          xAxes: [\r\n            \r\n            {\r\n              type: 'time',\r\n              time: {\r\n               \r\n                month: 'YYYY MMM',\r\n               \r\n              }\r\n            }\r\n          ],\r\n        },\r\n        plugins: {\r\n            title: {\r\n                display: true,\r\n                text: 'Rating Graph'\r\n            }\r\n        },\r\n        animation: {\r\n          duration: 0\r\n        },\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        spanGaps: true,\r\n      };\r\n\r\n    return (\r\n        <div>\r\n            <Line \r\n                data={data} \r\n                options={options} \r\n                height={400}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VersusRatingGraph\r\n","import { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport '../../pages/Versus.css';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    container: {\r\n        //   maxHeight: 440,\r\n    },\r\n    one: {\r\n\r\n    },\r\n    two: {\r\n\r\n    },\r\n    draw: {\r\n\r\n    }\r\n});\r\n\r\nconst VersusCommonContest = ({ userContest1, userContest2 }) => {\r\n    const classes = useStyles();\r\n\r\n    let contest1 = new Map();\r\n    let username1, username2;\r\n    if (userContest2.length > 0) {\r\n        username1 = userContest1[0].handle;\r\n        username2 = userContest2[0].handle;\r\n    }\r\n\r\n    for (let i = 0; i < userContest1.length; i++) {\r\n        contest1.set(userContest1[i].contestId, userContest1[i]);\r\n    }\r\n    let rows = [];\r\n\r\n    for (let i = 0; i < userContest2.length; i++) {\r\n        if (!contest1.has(userContest2[i].contestId)) {\r\n            continue;\r\n        }\r\n\r\n        rows.push({\r\n            name: userContest2[i].contestName,\r\n            user1: contest1.get(userContest2[i].contestId).rank,\r\n            user2: userContest2[i].rank,\r\n            diff: contest1.get(userContest2[i].contestId).rank - userContest2[i].rank,\r\n        })\r\n    }\r\n    rows = rows.reverse();\r\n    // console.log(rows);\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(10);\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    const columns = [\r\n        { id: 'name', label: 'Common Contest', minWidth: 170, align: 'left', },\r\n        { id: 'rank1', label: username1, minWidth: 100, align: 'right', },\r\n        { id: 'rank2', label: username2, minWidth: 100, align: 'right', },\r\n        { id: 'diff', label: 'Difference', minWidth: 100, align: 'right', },\r\n    ];\r\n    return (\r\n        <Paper className={classes.root}>\r\n            <TableContainer className={classes.container}>\r\n                <Table stickyHeader aria-label=\"sticky table\">\r\n                    <TableHead className=\"versus-table-head\">\r\n                        <TableRow >\r\n                            {columns.map((column) => (\r\n                                <TableCell\r\n                                    key={column.id}\r\n                                    align={column.align}\r\n                                    style={{ backgroundColor: \"#8ba3cf\" }}\r\n                                    // style={{ minWidth: column.minWidth }}\r\n                                >\r\n                                    {column.label}\r\n                                </TableCell>\r\n                            ))}\r\n                            \r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody className=\"versus-table-body\">\r\n                        {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\r\n                            return (\r\n                                \r\n                                <TableRow key={row.name} style={row.diff>0 ? {backgroundColor: \"rgb(201 177 207)\"} : {backgroundColor: \"#f0d6f6\"}}>\r\n                                    <TableCell component=\"th\" scope=\"row\">\r\n                                        {row.name}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"right\">{row.user1}</TableCell>\r\n                                    <TableCell align=\"right\">{row.user2}</TableCell>\r\n                                    <TableCell align=\"right\">{Math.abs(row.diff)}</TableCell>\r\n\r\n                                </TableRow>\r\n                            );\r\n                        })}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            <TablePagination\r\n                className=\"versus-table-head\"\r\n                rowsPerPageOptions={[10, 25, 100]}\r\n                component=\"div\"\r\n                count={rows.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                onChangePage={handleChangePage}\r\n                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n            />\r\n        </Paper>\r\n        \r\n    )\r\n}\r\n\r\nexport default VersusCommonContest\r\n","import { Bar } from 'react-chartjs-2';\r\n\r\nconst VersusProblemIndexGraph = ({userSubmissions1,userSubmissions2,username1,username2}) => {\r\n\r\n    let index = new Map();\r\n    let index1= new Map();\r\n    let id1=new Map();\r\n    for(let i=0;i<userSubmissions1.length;i++){\r\n        if(userSubmissions1[i].verdict!==\"OK\"){\r\n            continue;\r\n        }\r\n        let key1=userSubmissions1[i].contestId + userSubmissions1[i].problem.index;\r\n        if(id1.has(key1)){\r\n            continue;\r\n        }\r\n        id1.set(key1,true);\r\n        let currIndex1=userSubmissions1[i].problem.index[0];\r\n        if(currIndex1<'A' || currIndex1 > 'Z'){\r\n            continue;\r\n        }\r\n        if(!index1.has(currIndex1)){\r\n            index1.set(currIndex1,1);\r\n        }\r\n        else{\r\n            let temp=index1.get(currIndex1);\r\n            index1.set(currIndex1,temp+1);\r\n        }\r\n        index.set(currIndex1,1);\r\n    }\r\n\r\n    let index2= new Map();\r\n    let id2=new Map();\r\n    for(let i=0;i<userSubmissions2.length;i++){\r\n        if(userSubmissions2[i].verdict!==\"OK\"){\r\n            continue;\r\n        }\r\n        let key2=userSubmissions2[i].contestId + userSubmissions2[i].problem.index;\r\n        if(id2.has(key2)){\r\n            continue;\r\n        }\r\n        id2.set(key2,true);\r\n        let currIndex2=userSubmissions2[i].problem.index[0];\r\n        if(currIndex2<'A' || currIndex2 > 'Z'){\r\n            continue;\r\n        }\r\n        if(!index2.has(currIndex2)){\r\n            index2.set(currIndex2,1);\r\n        }\r\n        else{\r\n            let temp=index2.get(currIndex2);\r\n            index2.set(currIndex2,temp+1)\r\n        }\r\n        index.set(currIndex2,1);\r\n    }\r\n\r\n    const data = {\r\n        labels: [],\r\n        datasets: [\r\n          {\r\n            label: username1,\r\n            data: [],\r\n            backgroundColor: [\r\n              'red',\r\n            ],\r\n            borderColor: [\r\n              'rgba(255, 99, 132, 1)',\r\n            ],\r\n            borderWidth: 2,\r\n          },\r\n          {\r\n            label: username2,\r\n            data: [],\r\n            backgroundColor: [\r\n              'blue',\r\n            ],\r\n            borderColor: [\r\n              'rgba(255, 99, 132, 1)',\r\n            ],\r\n            borderWidth: 2,\r\n          },\r\n        ],\r\n    };\r\n\r\n    \r\n    var indexAsc = new Map([...index.entries()].sort());\r\n\r\n    for(let[key,value] of indexAsc){\r\n        data.labels.push(key);\r\n        data.datasets[0].data.push(index1.has(key)? index1.get(key) :0);\r\n        data.datasets[1].data.push(index2.has(key)? index2.get(key) :0);  \r\n    }\r\n    \r\n    const options = {\r\n        // barValueSpacing: 20,\r\n        scales: {\r\n          yAxes: [\r\n            {\r\n              ticks: {\r\n                beginAtZero: true,\r\n              },\r\n            },\r\n          ],\r\n        },\r\n        plugins: {\r\n          title: {\r\n              display: true,\r\n              text: 'Problem Index'\r\n          }\r\n        },\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Bar \r\n                data={data} \r\n                options={options}\t           \r\n                height={400}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VersusProblemIndexGraph\r\n","import { Bar } from 'react-chartjs-2';\r\n\r\nconst VersusProblemRatingGraph = ({userSubmissions1,userSubmissions2,username1,username2}) => {\r\n    \r\n    let rating = new Map();\r\n\r\n    let rating1 = new Map();\r\n    let id1=new Map();\r\n    for(let i=0;i<userSubmissions1.length;i++){\r\n        if(userSubmissions1[i].verdict!==\"OK\"){\r\n            continue;\r\n        }\r\n        let key1=userSubmissions1[i].contestId + userSubmissions1[i].problem.index;\r\n        if(id1.has(key1)){\r\n            continue;\r\n        }\r\n        id1.set(key1,true);\r\n        let currRating1=userSubmissions1[i].problem.rating;\r\n        if(currRating1===undefined){\r\n            continue;\r\n        }\r\n        currRating1=parseInt(currRating1);\r\n        if(!rating1.has(currRating1)){\r\n            rating1.set(currRating1,1);\r\n        }\r\n        else{\r\n            let temp=rating1.get(currRating1);\r\n            rating1.set(currRating1,temp+1);\r\n        }\r\n        rating.set(currRating1,1);\r\n    } \r\n    \r\n    let rating2 = new Map();\r\n    let id2=new Map();\r\n    for(let i=0;i<userSubmissions2.length;i++){\r\n        if(userSubmissions2[i].verdict!==\"OK\"){\r\n            continue;\r\n        }\r\n        let key2=userSubmissions2[i].contestId + userSubmissions2[i].problem.index;\r\n        if(id2.has(key2)){\r\n            continue;\r\n        }\r\n        id2.set(key2,true);\r\n        let currRating2=userSubmissions2[i].problem.rating;\r\n        if(currRating2===undefined){\r\n            continue;\r\n        }\r\n        currRating2=parseInt(currRating2);\r\n        if(!rating2.has(currRating2)){\r\n            rating2.set(currRating2,1);\r\n        }\r\n        else{\r\n            let temp=rating2.get(currRating2);\r\n            rating2.set(currRating2,temp+1);\r\n        }\r\n        rating.set(currRating2,1);\r\n    } \r\n    \r\n    var ratingAsc = new Map([...rating.entries()].sort(function order(key1, key2) {\r\n        if (parseInt(key1) < parseInt(key2)) return -1;\r\n        else if (parseInt(key1) > parseInt(key2)) return +1;\r\n        else return 0;\r\n    }));\r\n\r\n    const data = {\r\n        labels: [],\r\n        datasets: [\r\n          {\r\n            label: username1,\r\n            data: [],\r\n            backgroundColor: [\r\n              'red',\r\n            ],\r\n            borderColor: [\r\n              'rgba(255, 99, 132, 1)',\r\n            ],\r\n            borderWidth: 2,\r\n          },\r\n          {\r\n            label: username2,\r\n            data: [],\r\n            backgroundColor: [\r\n              'blue',\r\n            ],\r\n            borderColor: [\r\n              'rgba(255, 99, 132, 1)',\r\n            ],\r\n            borderWidth: 2,\r\n          },\r\n        ],\r\n    };\r\n\r\n    for(let[key,value] of ratingAsc){\r\n        data.labels.push(key);\r\n        data.datasets[0].data.push(rating1.has(key)? rating1.get(key) :0);\r\n        data.datasets[1].data.push(rating2.has(key)? rating2.get(key) :0);  \r\n    }\r\n\r\n\r\n    const options = {\r\n        scales: {\r\n          yAxes: [\r\n            {\r\n              ticks: {\r\n                beginAtZero: true,\r\n              },\r\n            },\r\n          ],\r\n        },\r\n        plugins: {\r\n          title: {\r\n              display: true,\r\n              text: 'Problem Rating'\r\n          }\r\n        },\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Bar \r\n                data={data} \r\n                options={options}\r\n\t              height={400}\r\n               \r\n            />     \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VersusProblemRatingGraph\r\n","import { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport '../../pages/Versus.css'\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n        // maxWidth: 500,\r\n        // minWidth: 450\r\n    },\r\n});\r\n\r\nconst rows = [\r\n\r\n];\r\n\r\nconst VersusUserInfo = ({ userInfo1, userInfo2}) => {\r\n    const classes = useStyles();\r\n    let username1 = userInfo1.handle;\r\n    let name1 = userInfo1.firstName + \" \" + userInfo1.lastName;\r\n    let country1 = userInfo1.country;\r\n    let rating1 = userInfo1.rating + '(' + userInfo1.rank + ')';\r\n    let maxRating1 = userInfo1.maxRating + '(' + userInfo1.maxRank + ')';\r\n    let contribution1 = userInfo1.contribution;\r\n\r\n    let username2 = userInfo2.handle;\r\n    let name2 = userInfo2.firstName + \" \" + userInfo2.lastName;\r\n    let country2 = userInfo2.country;\r\n    let rating2 = userInfo2.rating + '(' + userInfo2.rank + ')';\r\n    let maxRating2 = userInfo2.maxRating + '(' + userInfo2.maxRank + ')';\r\n    let contribution2 = userInfo2.contribution;\r\n\r\n    rows.splice(0, rows.length);\r\n    rows.push({\r\n        name: \"Name\",\r\n        data1: name1,\r\n        data2: name2\r\n    });\r\n    rows.push({\r\n        name: 'Country',\r\n        data1: country1,\r\n        data2: country2\r\n    });\r\n    rows.push({\r\n        name: 'Rating',\r\n        data1: rating1,\r\n        data2: rating2\r\n    });\r\n    rows.push({\r\n        name: 'Max Rating',\r\n        data1: maxRating1,\r\n        data2: maxRating2\r\n    });\r\n    rows.push({\r\n        name: 'Contribution',\r\n        data1: contribution1,\r\n        data2: contribution2\r\n    });\r\n\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Table className={classes.table} aria-label=\"simple table\">\r\n                <TableHead className=\"versus-table-head\">\r\n                    <TableRow>\r\n                        <TableCell>Info of</TableCell>\r\n                        <TableCell align=\"right\">{username1}</TableCell>\r\n                        <TableCell align=\"right\">{username2}</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody className=\"versus-table-body\">\r\n                    {rows.map((row) => (\r\n                        <TableRow key={row.name}>\r\n                            <TableCell component=\"th\" scope=\"row\">\r\n                                {row.name}\r\n                            </TableCell>\r\n                            <TableCell align=\"right\">{row.data1}</TableCell>\r\n                            <TableCell align=\"right\">{row.data2}</TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    )\r\n}\r\n\r\nexport default VersusUserInfo\r\n","import { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport '../../pages/Versus.css'\r\nconst useStyles = makeStyles({\r\n    table: {\r\n        // maxWidth: 500,\r\n        // minWidth: 450\r\n    },\r\n});\r\n\r\nconst rows = [];\r\n\r\nconst VersusUserContest = ({ userContest1, userContest2 }) => {\r\n    const classes = useStyles();\r\n    \r\n    let username1 = userContest1.length>0 ? userContest1[0].handle : '';\r\n    userContest1 = Array.from(userContest1);\r\n    let bestRank1 = Math.min.apply(null, userContest1.map(function (item) {\r\n        return item.rank;\r\n    }));\r\n    let worstRank1 = Math.max.apply(null, userContest1.map(function (item) {\r\n        return item.rank;\r\n    }));\r\n    let maxUp1 = Math.max.apply(null, userContest1.map(function (item) {\r\n        return item.newRating - item.oldRating;\r\n    }));\r\n    let maxDown1 = Math.min.apply(null, userContest1.map(function (item) {\r\n        return item.newRating - item.oldRating;\r\n    }));\r\n\r\n    let username2 = userContest2.length>0 ? userContest2[0].handle : '';\r\n    \r\n    userContest2 = Array.from(userContest2);\r\n    let bestRank2 = Math.min.apply(null, userContest2.map(function (item) {\r\n        return item.rank;\r\n    }));\r\n    let worstRank2 = Math.max.apply(null, userContest2.map(function (item) {\r\n        return item.rank;\r\n    }));\r\n    let maxUp2 = Math.max.apply(null, userContest2.map(function (item) {\r\n        return item.newRating - item.oldRating;\r\n    }));\r\n    let maxDown2 = Math.min.apply(null, userContest2.map(function (item) {\r\n        return item.newRating - item.oldRating;\r\n    }));\r\n\r\n    rows.splice(0, rows.length);\r\n    rows.push({\r\n        name: \"No of contests\",\r\n        data1: userContest1.length,\r\n        data2: userContest2.length,\r\n    });\r\n    rows.push({\r\n        name: 'Best Rank',\r\n        data1: bestRank1,\r\n        data2: bestRank2\r\n    });\r\n    rows.push({\r\n        name: 'Worst Rank',\r\n        data1: worstRank1,\r\n        data2: worstRank2\r\n    });\r\n    rows.push({\r\n        name: 'Max Up',\r\n        data1: maxUp1,\r\n        data2: maxUp2\r\n    });\r\n    rows.push({\r\n        name: 'Max Down',\r\n        data1: maxDown1,\r\n        data2: maxDown2\r\n    });\r\n\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Table className={classes.table} aria-label=\"simple table\">\r\n                <TableHead className=\"versus-table-head\">\r\n                    <TableRow>\r\n                        <TableCell>Contests of</TableCell>\r\n                        <TableCell align=\"right\">{username1}</TableCell>\r\n                        <TableCell align=\"right\">{username2}</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody className=\"versus-table-body\">\r\n                    {rows.map((row) => (\r\n                        <TableRow key={row.name}>\r\n                            <TableCell component=\"th\" scope=\"row\">\r\n                                {row.name}\r\n                            </TableCell>\r\n                            <TableCell align=\"right\">{row.data1}</TableCell>\r\n                            <TableCell align=\"right\">{row.data2}</TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    )\r\n}\r\n\r\nexport default VersusUserContest\r\n","import { Bar } from 'react-chartjs-2';\r\n\r\nconst VersusSubmissionsCompare = ({username1,username2,userSubmissions1,userSubmissions2}) => {\r\n\r\n    let tried1 = new Map();\r\n    let solved1 = new Map();\r\n    for(let i=0;i<userSubmissions1.length;i++){\r\n        let key=userSubmissions1[i].contestId + userSubmissions1[i].problem.index;\r\n        let verdict=userSubmissions1[i].verdict;\r\n        if(!tried1.has(key)){\r\n            tried1.set(key,1);\r\n        }\r\n        if(!solved1.has(key) && verdict===\"OK\"){\r\n            solved1.set(key,1);\r\n        }\r\n    }\r\n    let submissions1= userSubmissions1.length;\r\n\r\n    let tried2 = new Map();\r\n    let solved2 = new Map();\r\n    for(let i=0;i<userSubmissions2.length;i++){\r\n        let key=userSubmissions2[i].contestId + userSubmissions2[i].problem.index;\r\n        let verdict=userSubmissions2[i].verdict;\r\n        if(!tried2.has(key)){\r\n            tried2.set(key,1);\r\n        }\r\n        if(!solved2.has(key) && verdict===\"OK\"){\r\n            solved2.set(key,1);\r\n        }\r\n    }\r\n    let submissions2= userSubmissions2.length;\r\n\r\n    const data = {\r\n        labels: ['Tried','Solved','Total Subissions'],\r\n        datasets: [\r\n          {\r\n            label: username1,\r\n            data: [tried1.size,solved1.size,submissions1],\r\n            backgroundColor: [\r\n              'red',\r\n            ],\r\n            borderColor: [\r\n              'rgba(255, 99, 132, 1)',\r\n            ],\r\n            borderWidth: 2,\r\n          },\r\n          {\r\n            label: username2,\r\n            data: [tried2.size,solved2.size,submissions2],\r\n            backgroundColor: [\r\n              'blue',\r\n            ],\r\n            borderColor: [\r\n              'rgba(255, 99, 132, 1)',\r\n            ],\r\n            borderWidth: 2,\r\n          },\r\n        ],\r\n    };\r\n\r\n    const options = {\r\n        scales: {\r\n          yAxes: [\r\n            {\r\n              ticks: {\r\n                beginAtZero: true,\r\n              },\r\n            },\r\n          ],\r\n        },\r\n        plugins: {\r\n          title: {\r\n              display: true,\r\n              text: 'Submissions'\r\n          }\r\n        },\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Bar \r\n                data={data} \r\n                options={options}\r\n\t              height={400}\r\n               \r\n            />  \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VersusSubmissionsCompare\r\n","import { Pie } from \"react-chartjs-2\";\r\n\r\nconst VersusCommonPie = ({ userContest1, userContest2 }) => {\r\n    let contest1 = new Map();\r\n    let one=0,two=0,draw=0;\r\n\r\n    let username1 = userContest1.length>0 ? userContest1[0].handle : '';\r\n    let username2 = userContest2.length>0 ? userContest2[0].handle : '';\r\n\r\n    for (let i = 0; i < userContest1.length; i++) {\r\n        contest1.set(userContest1[i].contestId, userContest1[i]);\r\n    }\r\n    for (let i = 0; i < userContest2.length; i++) {\r\n        if (!contest1.has(userContest2[i].contestId)) {\r\n            continue;\r\n        }\r\n\r\n        let diff=contest1.get(userContest2[i].contestId).rank-userContest2[i].rank;\r\n        if(diff<0){\r\n            one++;\r\n        }\r\n        else if(diff>0){\r\n            two++;\r\n        }\r\n        else{\r\n            draw++;\r\n        }\r\n    }\r\n\r\n    const data = {\r\n        labels: [username1,username2,'Tied'],\r\n        datasets: [\r\n            {\r\n                label: \"Head-To-Head\",\r\n                data: [one,two,draw],\r\n                backgroundColor: [\r\n                    \"red\",\r\n                    \"blue\",\r\n                    \"orange\",\r\n                ],\r\n                borderColor: [\r\n                    \"rgba(255, 99, 132, 1)\",\r\n                    \"rgba(54, 162, 235, 1)\",\r\n                    \"rgba(255, 206, 86, 1)\",\r\n                ],\r\n                borderWidth: 1,\r\n            },\r\n        ],\r\n    };\r\n\r\n    const options = {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        plugins: {\r\n            legend: {\r\n                display: true,\r\n            },\r\n            title: {\r\n                display: true,\r\n                text: 'Head-to-Head'\r\n            }\r\n        },\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Pie data={data} \r\n                options={options} \r\n                height={400} \r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VersusCommonPie\r\n","import './Footer.css';\r\nconst Footer = () => {\r\n    return (\r\n        <footer className=\"footer\">\r\n            <span>\r\n                Developed by <a href=\"https://codeforces.com/profile/srinjoy_ray\"  target=\"_blank\">Srinjoy Ray</a>\r\n            </span>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","import { useState, useEffect } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport axios from 'axios'\r\n\r\nimport VersusRatingGraph from \"../components/VersusRatingGraph/VersusRatingGraph\"\r\nimport VersusCommonContest from \"../components/VersusCommonContest/VersusCommonContest\"\r\nimport VersusProblemIndexGraph from \"../components/VersusProblemIndexGraph/VersusProblemIndexGraph\"\r\nimport VersusProblemRatingGraph from \"../components/VersusProblemRatingGraph/VersusProblemRatingGraph\"\r\nimport VersusUserInfo from \"../components/VersusUser/VersusUserInfo\"\r\nimport VersusUserContest from \"../components/VersusUser/VersusUserContest\"\r\nimport VersusSubmissionsCompare from \"../components/VersusSubmissionsCompare/VersusSubmissionsCompare\"\r\nimport VersusCommonPie from \"../components/VersusCommonContest/VersusCommonPie\"\r\nimport Footer from '../components/Footer/Footer';\r\nimport './Versus.css';\r\n\r\n\r\nconst Versus = () => {\r\n\r\n    const [currname1, setCurrname1] = useState('');\r\n    const [username1, setUsername1] = useState('');\r\n    const [userInfo1, setUserInfo1] = useState('');\r\n    const [userContest1, setUserContest1] = useState('');\r\n    const [userSubmissions1, setUserSubmissions1] = useState('');\r\n\r\n    const [currname2, setCurrname2] = useState('');\r\n    const [username2, setUsername2] = useState('');\r\n    const [userInfo2, setUserInfo2] = useState('');\r\n    const [userContest2, setUserContest2] = useState('');\r\n    const [userSubmissions2, setUserSubmissions2] = useState('');\r\n\r\n    const fetchItemsVersus = async () => {\r\n        \r\n        const resultUI1 = await axios(`https://codeforces.com/api/user.info?handles=${currname1}`);\r\n        let user = resultUI1.data.result[0];\r\n        setUserInfo1(user);\r\n\r\n        const resultUI2 = await axios(`https://codeforces.com/api/user.info?handles=${currname2}`);\r\n        user = resultUI2.data.result[0];\r\n        setUserInfo2(user);\r\n\r\n        const resultUC1 = await axios(`https://codeforces.com/api/user.rating?handle=${currname1}`);\r\n        user = resultUC1.data.result;\r\n        setUserContest1(user);\r\n\r\n        const resultUC2 = await axios(`https://codeforces.com/api/user.rating?handle=${currname2}`);\r\n        user = resultUC2.data.result;\r\n        setUserContest2(user);\r\n\r\n        const resultUS1 = await axios(`https://codeforces.com/api/user.status?handle=${currname1}`)\r\n        user = resultUS1.data.result;\r\n        setUserSubmissions1(user);\r\n\r\n        const resultUS2 = await axios(`https://codeforces.com/api/user.status?handle=${currname2}`)\r\n        user = resultUS2.data.result;\r\n        setUserSubmissions2(user);\r\n\r\n\r\n    }\r\n\r\n\r\n    const handleSubmitVersus = async(e) => {\r\n        e.preventDefault();\r\n        setUsername1(currname1);\r\n        setUsername2(currname2);\r\n        console.log(currname1,currname2);\r\n        fetchItemsVersus();\r\n    }\r\n\r\n\r\n    function render() {\r\n        // console.log(userInfo1, userInfo2);\r\n        if (userInfo1 && username1 === userInfo1.handle && userInfo2 && username2 === userInfo2.handle) {\r\n            return (\r\n                <>\r\n                    <div className=\"versus-user-bio\">\r\n                        <div className=\"versus-user-bio-component\">\r\n                            <VersusUserInfo userInfo1={userInfo1} userInfo2={userInfo2} />\r\n                        </div>\r\n                        <div className=\"versus-user-bio-component\">\r\n                            <VersusUserContest userContest1={userContest1} userContest2={userContest2} />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"versus-graph-components\" >\r\n                        <VersusRatingGraph userContest1={userContest1} userContest2={userContest2} />\r\n                    </div>\r\n\r\n                    <div className=\"versus-pie-chart\">\r\n                        <div className=\"versus-pie-chart-component\" >\r\n                            <VersusCommonPie userContest1={userContest1} userContest2={userContest2} />\r\n                        </div>\r\n                        <div className=\"versus-pie-chart-component\" >\r\n                            <VersusSubmissionsCompare userSubmissions1={userSubmissions1} userSubmissions2={userSubmissions2} username1={username1} username2={username2} />\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                    <div className=\"versus-graph-components\" >\r\n                        <VersusProblemIndexGraph userSubmissions1={userSubmissions1} userSubmissions2={userSubmissions2} username1={username1} username2={username2} />\r\n                    </div>\r\n                    <div className=\"versus-graph-components\" >\r\n                        <VersusProblemRatingGraph userSubmissions1={userSubmissions1} userSubmissions2={userSubmissions2} username1={username1} username2={username2} />\r\n                    </div>\r\n                    <div className=\"versus-graph-components versus-last\" >\r\n                        <VersusCommonContest userContest1={userContest1} userContest2={userContest2} />\r\n                    </div>\r\n                    <Footer/>\r\n                </>\r\n            )\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <form noValidate autoComplete=\"on\" onSubmit={handleSubmitVersus} className=\"versus-form\" >\r\n                <div className=\"versus-text-input\">\r\n                    <TextField\r\n                        className=\"versus-text-input-component\"\r\n                        onChange={(e) => setCurrname1(e.target.value)}\r\n                        label=\"Codeforces Username *\"\r\n                        variant=\"outlined\"\r\n                        color=\"primary\"\r\n                    // required\r\n                    />\r\n                    <TextField\r\n                        className=\"versus-text-input-component\"\r\n                        onChange={(e) => setCurrname2(e.target.value)}\r\n                        label=\"Codeforces Username *\"\r\n                        variant=\"outlined\"\r\n                        color=\"primary\"\r\n                    // required\r\n                    />\r\n                </div>\r\n                <Button\r\n                    className=\"versus-btn\"\r\n                    type=\"submit\"\r\n                    color=\"secondary\"\r\n                    variant=\"contained\"\r\n                >\r\n                    Submit\r\n                </Button>\r\n            </form>\r\n            {render()}\r\n            \r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Versus\r\n","import { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport './UserBio.css'\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    // maxWidth: 500,\r\n    // minWidth: 450\r\n  },\r\n});\r\n\r\nconst rows = [\r\n\r\n];\r\n\r\nexport default function UserInfo({ userInfo, username }) {\r\n  const classes = useStyles();\r\n\r\n  let name=userInfo.firstName+\" \"+userInfo.lastName;\r\n  let country=userInfo.country;\r\n  let rating=userInfo.rating+'('+userInfo.rank+')';\r\n  let maxRating=userInfo.maxRating+'('+userInfo.maxRank+')';\r\n  let contribution=userInfo.contribution;\r\n\r\n  rows.splice(0,rows.length);\r\n  rows.push({\r\n    name:\"Name\",\r\n    data: name\r\n  });\r\n  rows.push({\r\n    name: 'Country',\r\n    data: country\r\n  });\r\n  rows.push({\r\n    name: 'Rating',\r\n    data: rating\r\n  });\r\n  rows.push({\r\n    name: 'Max Rating',\r\n    data: maxRating\r\n  });\r\n  rows.push({\r\n    name: 'Contribution',\r\n    data: contribution\r\n  });\r\n\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table className={classes.table} aria-label=\"simple table\">\r\n        <TableHead className=\"table-head\">\r\n          <TableRow>\r\n            <TableCell>Info of</TableCell>\r\n            <TableCell align=\"right\">{username}</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody className=\"table-body\">\r\n          {rows.map((row) => (\r\n            <TableRow key={row.name}>\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                {row.name}\r\n              </TableCell>\r\n              <TableCell align=\"right\">{row.data}</TableCell>\r\n\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n","import { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport './UserBio.css'\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    // maxWidth: 500,\r\n    // minWidth: 450\r\n  },\r\n});\r\n\r\nconst rows = [\r\n\r\n];\r\n\r\nexport default function UserContest({ userContest, username }) {\r\n  const classes = useStyles();\r\n\r\n  userContest = Array.from(userContest);\r\n  let bestRank = Math.min.apply(null, userContest.map(function (item) {\r\n    return item.rank;\r\n  }));\r\n  \r\n  let worstRank = Math.max.apply(null, userContest.map(function (item) {\r\n    return item.rank;\r\n  }));\r\n  let maxUp = Math.max.apply(null, userContest.map(function (item) {\r\n    return item.newRating - item.oldRating;\r\n  }));\r\n\r\n  let maxDown = Math.min.apply(null, userContest.map(function (item) {\r\n    return item.newRating - item.oldRating;\r\n  }));\r\n\r\n  rows.splice(0,rows.length);\r\n  rows.push({\r\n    name:\"No of contests\",\r\n    data: userContest.length\r\n  });\r\n  rows.push({\r\n    name: 'Best Rank',\r\n    data: bestRank\r\n  });\r\n  rows.push({\r\n    name: 'Worst Rank',\r\n    data: worstRank\r\n  });\r\n  rows.push({\r\n    name: 'Max Up',\r\n    data: maxUp\r\n  });\r\n  rows.push({\r\n    name: 'Max Down',\r\n    data: maxDown\r\n  });\r\n\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table className={classes.table} aria-label=\"simple table\">\r\n        <TableHead className=\"table-head\">\r\n          <TableRow>\r\n            <TableCell>Contests of</TableCell>\r\n            <TableCell align=\"right\">{username}</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody className=\"table-body\">\r\n          {rows.map((row) => (\r\n            <TableRow key={row.name}>\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                {row.name}\r\n              </TableCell>\r\n              <TableCell align=\"right\">{row.data}</TableCell>\r\n\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n","import { Pie } from \"react-chartjs-2\";\r\nimport \"chartjs-plugin-datalabels\";\r\nimport {Chart} from 'chart.js';\r\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\r\n\r\n\r\nconst ProblemVerdict = ({userSubmissions}) => {\r\n   \r\n    let ac=0,tle=0,wa=0,rte=0,others=0,total;\r\n    total=userSubmissions.length;\r\n    for(let i=0;i<userSubmissions.length;i++){\r\n        if(userSubmissions[i].verdict===\"OK\"){\r\n            ac++;\r\n        }\r\n        else if(userSubmissions[i].verdict===\"TIME_LIMIT_EXCEEDED\"){\r\n            tle++;\r\n        }\r\n        else if(userSubmissions[i].verdict===\"WRONG_ANSWER\"){\r\n            wa++;\r\n        }\r\n        else if(userSubmissions[i].verdict===\"RUNTIME_ERROR\"){\r\n            rte++;\r\n        }\r\n        else{\r\n            others++;\r\n        }\r\n    }\r\n    \r\n    const data = {\r\n        labels: [],\r\n        datasets: [\r\n          {\r\n            label: '',\r\n            data: [],\r\n            backgroundColor: [\r\n                \"rgba(138, 216, 38, 0.8)\",\r\n                \"rgba(228, 28, 28, 0.8)\",\r\n                \"rgba(4, 119, 198, 0.8)\",\r\n                'rgba(198, 8, 140, 0.8)',\r\n                'rgba(155, 159, 182, 0.8)',\r\n                'rgba(205, 170, 30, 0.8)',\r\n            ],\r\n            borderColor: [\r\n                \"rgba(138, 216, 38, 1)\",\r\n                \"rgba(228, 28, 28, 1)\",\r\n                \"rgba(4, 119, 198, 1)\",\r\n                'rgba(198, 8, 140, 1)',\r\n                'rgba(155, 159, 182, 1)',\r\n                'rgba(205, 170, 30, 1)',\r\n            ],\r\n            borderWidth: 1,\r\n            \r\n          },\r\n        ],\r\n    };\r\n    data.labels.push('Accepted');\r\n    data.datasets[0].data.push(ac);\r\n    data.labels.push('Wrong Answer');\r\n    data.datasets[0].data.push(wa);\r\n    data.labels.push('Time Limit Exceeded');\r\n    data.datasets[0].data.push(tle);\r\n    data.labels.push('Run Time Error');\r\n    data.datasets[0].data.push(rte);\r\n    data.labels.push('Others');\r\n    data.datasets[0].data.push(others);\r\n\r\n    const options = {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        plugins: {\r\n            legend: {\r\n                display: false\r\n            },\r\n            title: {\r\n                display: true,\r\n                text: 'Verdicts',\r\n            },\r\n            datalabels: {\r\n                display: true,\r\n                align: 'bottom',\r\n                backgroundColor: '#ccc',\r\n                borderRadius: 3,\r\n                font: {\r\n                  size: 18,\r\n                }\r\n            },\r\n        }\r\n    };\r\n    \r\n    return (\r\n        <div>\r\n            <Pie \r\n                data={data} \r\n                options={options}\r\n                height={400}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProblemVerdict\r\n","import { Pie } from \"react-chartjs-2\";\r\n\r\nconst ProblemLanguage = ({ userSubmissions }) => {\r\n    let lang = new Map();\r\n\r\n    for (let i = 0; i < userSubmissions.length; i++) {\r\n        let currLang = userSubmissions[i].programmingLanguage;\r\n\r\n        if (!lang.has(currLang)) {\r\n            lang.set(currLang, 1);\r\n        } else {\r\n            let temp = lang.get(currLang);\r\n            lang.set(currLang, temp + 1);\r\n        }\r\n    }\r\n    \r\n    var langDsc = new Map([...lang.entries()].sort((a, b) => b[1] - a[1]));\r\n    const data = {\r\n        labels: [],\r\n        datasets: [\r\n            {\r\n                label: \"\",\r\n                data: [],\r\n                backgroundColor: [\r\n                    \"rgba(228, 28, 28, 0.8)\",\r\n                    \"rgba(138, 216, 38, 0.8)\",\r\n                    \"rgba(4, 119, 198, 0.8)\",\r\n                    'rgba(198, 8, 140, 0.8)',\r\n                    'rgba(155, 159, 182, 0.8)',\r\n                    'rgba(205, 170, 30, 0.8)',\r\n                ],\r\n                borderColor: [\r\n                    \"rgba(228, 28, 28, 1)\",\r\n                    \"rgba(138, 216, 38, 1)\",\r\n                    \"rgba(4, 119, 198, 1)\",\r\n                    'rgba(198, 8, 140, 1)',\r\n                    'rgba(155, 159, 182, 1)',\r\n                    'rgba(205, 170, 30, 1)',\r\n                ],\r\n                borderWidth: 1,\r\n            },\r\n        ],\r\n    };\r\n    for (let [key, value] of langDsc) {\r\n        data.labels.push(key);\r\n        data.datasets[0].data.push(value);\r\n    }\r\n\r\n    const options = {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        plugins: {\r\n            legend: {\r\n                display: false,\r\n            },\r\n            title: {\r\n                display: true,\r\n                text: 'Languages'\r\n            }\r\n        },\r\n    };\r\n    return (\r\n        <div>\r\n            <Pie data={data} \r\n                options={options} \r\n                height={400} \r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProblemLanguage;\r\n","import { Line } from 'react-chartjs-2';\r\nimport moment from 'moment';\r\n\r\n\r\nconst RatingGraph = ({userContest}) => {\r\n    \r\n    const data = {\r\n        labels: [],\r\n        datasets: [\r\n          {\r\n            label: 'Rating',\r\n            data: [],\r\n            fill: false,\r\n            backgroundColor: 'rgb(228,28,28,1)',\r\n            borderColor: 'rgba(228,28,28,0.3)',\r\n          },\r\n        ],\r\n    };\r\n\r\n    \r\n    userContest = Array.from(userContest);\r\n    \r\n    for(let i=0;i<userContest.length;i++){    \r\n        let dateSeconds=userContest[i].ratingUpdateTimeSeconds;\r\n        let rating=userContest[i].newRating;\r\n        var date = new Date(null);\r\n        date.setTime(dateSeconds*1000);\r\n        \r\n        let momentDate = moment(date).format('MMM D, YYYY');\r\n        \r\n        data.datasets[0].data.push({x: momentDate, y:rating});\r\n        \r\n    }\r\n\r\n\r\n    const options = {\r\n        scales: {\r\n          yAxes: [\r\n            {\r\n              ticks: {\r\n                beginAtZero: true,\r\n              },\r\n            },\r\n          ],\r\n          xAxes: [\r\n            {\r\n              type: 'time',\r\n              time: {\r\n               \r\n                month: 'YYYY MMM',\r\n                \r\n              }\r\n            }\r\n          ],\r\n        },\r\n        plugins: {\r\n            title: {\r\n                display: true,\r\n                text: 'Rating Graph'\r\n            },\r\n            legend: {\r\n              display:false\r\n            }\r\n\r\n        },\r\n        animation: {\r\n          duration: 0\r\n        },\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n      };\r\n\r\n    return (\r\n        <div className=\"rating-graph\">\r\n            <Line \r\n                data={data} \r\n                options={options} \r\n                height={400}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RatingGraph\r\n","import { Doughnut } from 'react-chartjs-2';\r\n\r\nconst ProblemTagsGraph = ({userSubmissions}) => {\r\n    \r\n    let tag=new Map();\r\n    let id=new Map();\r\n    for(let i=0;i<userSubmissions.length;i++){\r\n        if(userSubmissions[i].verdict!==\"OK\"){\r\n            continue;\r\n        }\r\n        let key=userSubmissions[i].contestId + userSubmissions[i].problem.index;\r\n        if(id.has(key)){\r\n            continue;\r\n        }\r\n        id.set(key,true);\r\n        let currTag=userSubmissions[i].problem.tags;\r\n        \r\n        for(let j=0;j<currTag.length;j++){\r\n            if(!tag.has(currTag[j])){\r\n                tag.set(currTag[j],1);\r\n            }\r\n            else{\r\n                let temp=tag.get(currTag[j]);\r\n                tag.set(currTag[j],temp+1)\r\n            }\r\n        }\r\n        \r\n    }\r\n    \r\n    var tagDsc = new Map([...tag.entries()].sort((a, b) =>  b[1]-a[1]));\r\n\r\n    const data = {\r\n        labels: [],\r\n        datasets: [\r\n          {\r\n            label: '',\r\n            data: [],\r\n            backgroundColor: [\r\n                \"rgba(138, 216, 38, 0.8)\",\r\n                \"rgba(228, 28, 28, 0.8)\",\r\n                \"rgba(4, 119, 198, 0.8)\",\r\n                'rgba(198, 8, 140, 0.8)',\r\n                'rgba(155, 159, 182, 0.8)',\r\n\r\n                'rgba(63, 75, 172, 0.8)',\r\n                'rgba(9, 135, 54, 0.8)',\r\n                'rgba(6, 11, 110, 0.8)',\r\n                'rgba(255, 206, 86, 0.8)',\r\n                'rgba(75, 192, 192, 0.8)',\r\n                'rgba(153, 102, 255, 0.8)',\r\n                'rgba(255, 159, 64, 0.8)',\r\n            ],\r\n            borderColor: [\r\n                \"rgba(138, 216, 38, 1)\",\r\n                \"rgba(228, 28, 28, 1)\",\r\n                \"rgba(4, 119, 198, 1)\",\r\n                'rgba(198, 8, 140, 1)',\r\n                'rgba(155, 159, 182, 1)',\r\n                'rgba(63, 75, 172, 1)',\r\n                'rgba(9, 135, 54, 1)',\r\n                'rgba(6, 11, 110, 1)',\r\n                'rgba(255, 206, 86, 1)',\r\n                'rgba(75, 192, 192, 1)',\r\n                'rgba(153, 102, 255, 1)',\r\n                'rgba(255, 159, 64, 1)',\r\n            ],\r\n            borderWidth: 1,\r\n            \r\n          },\r\n        ],\r\n    };\r\n    for(let[key,value] of tagDsc){\r\n        data.labels.push(key);\r\n        data.datasets[0].data.push(value);\r\n    }\r\n\r\n    const options={\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        plugins:{   \r\n            legend: {\r\n            //   display: false\r\n                position: \"right\",\r\n                align:\"center\"\r\n            },\r\n            title: {\r\n                display: true,\r\n                text: 'Problem Tags'\r\n            }\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <Doughnut \r\n                data={data} \r\n                options={options}\r\n                height={400}\r\n                \r\n                \r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProblemTagsGraph\r\n","import { Bar } from 'react-chartjs-2';\r\n\r\nconst ProblemRatingGraph = ({userSubmissions}) => {\r\n    \r\n    let rating = new Map();\r\n    let id=new Map();\r\n    for(let i=0;i<userSubmissions.length;i++){\r\n        if(userSubmissions[i].verdict!==\"OK\"){\r\n            continue;\r\n        }\r\n        let key=userSubmissions[i].contestId + userSubmissions[i].problem.index;\r\n        if(id.has(key)){\r\n            continue;\r\n        }\r\n        id.set(key,true);\r\n        let currRating=userSubmissions[i].problem.rating;\r\n        if(currRating===undefined){\r\n            continue;\r\n        }\r\n        currRating=parseInt(currRating);\r\n        if(!rating.has(currRating)){\r\n            rating.set(currRating,1);\r\n        }\r\n        else{\r\n            let temp=rating.get(currRating);\r\n            rating.set(currRating,temp+1);\r\n        }\r\n    }\r\n   \r\n    var ratingAsc = new Map([...rating.entries()].sort(function order(key1, key2) {\r\n        if (parseInt(key1) < parseInt(key2)) return -1;\r\n        else if (parseInt(key1) > parseInt(key2)) return +1;\r\n        else return 0;\r\n    }));\r\n    const data = {\r\n        labels: [],\r\n        datasets: [\r\n          {\r\n            label: 'Problem Count',\r\n            data: [],\r\n            backgroundColor: [\r\n              'rgba(228, 28, 28, 0.8)',\r\n            ],\r\n            borderColor: [\r\n              'rgba(228, 28, 28, 1)',\r\n            ],\r\n            borderWidth: 2,\r\n          },\r\n        ],\r\n    };\r\n    for(let[key,value] of ratingAsc){\r\n        data.labels.push(key);\r\n        data.datasets[0].data.push(value);\r\n    }\r\n    const options = {\r\n        scales: {\r\n          yAxes: [\r\n            {\r\n              ticks: {\r\n                beginAtZero: true,\r\n              },\r\n            },\r\n          ],\r\n        },\r\n        plugins: {\r\n          title: {\r\n              display: true,\r\n              text: 'Problem Rating'\r\n          },\r\n          legend: {\r\n            display: false\r\n          }\r\n        },\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n    };\r\n    return (\r\n        <div>\r\n            <Bar \r\n                data={data} \r\n                options={options}\r\n\t              height={400}\r\n               \r\n            />       \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProblemRatingGraph\r\n","import { Bar } from 'react-chartjs-2';\r\n\r\nconst IndexGraph = ({userSubmissions}) => {\r\n    let index= new Map();\r\n    let id=new Map();\r\n    for(let i=0;i<userSubmissions.length;i++){\r\n        if(userSubmissions[i].verdict!==\"OK\"){\r\n            continue;\r\n        }\r\n        let key=userSubmissions[i].contestId + userSubmissions[i].problem.index;\r\n        if(id.has(key)){\r\n            continue;\r\n        }\r\n        id.set(key,true);\r\n        let currIndex=userSubmissions[i].problem.index[0];\r\n        if(currIndex<'A' || currIndex > 'Z'){\r\n          continue;\r\n        }\r\n        if(!index.has(currIndex)){\r\n            index.set(currIndex,1);\r\n        }\r\n        else{\r\n            let temp=index.get(currIndex);\r\n            index.set(currIndex,temp+1)\r\n        }\r\n    }\r\n    \r\n    var indexAsc = new Map([...index.entries()].sort());\r\n    const data = {\r\n        labels: [],\r\n        datasets: [\r\n          {\r\n            label: 'Problem Count',\r\n            data: [],\r\n            backgroundColor: [\r\n              'rgba(228, 28, 28, 0.8)',\r\n            ],\r\n            borderColor: [\r\n              'rgba(228, 28, 28, 1)',\r\n            ],\r\n            borderWidth: 2,\r\n          },\r\n        ],\r\n    };\r\n    for(let[key,value] of indexAsc){\r\n        data.labels.push(key);\r\n        data.datasets[0].data.push(value);\r\n    }\r\n    \r\n\r\n    const options = {\r\n        scales: {\r\n          yAxes: [\r\n            {\r\n              ticks: {\r\n                beginAtZero: true,\r\n              },\r\n            },\r\n          ],\r\n        },\r\n        plugins: {\r\n          title: {\r\n              display: true,\r\n              text: 'Problem Index'\r\n          },\r\n          legend: {\r\n            display: false\r\n          }\r\n        },\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Bar \r\n                data={data} \r\n                options={options}\t           \r\n                height={400}\r\n              \r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default IndexGraph\r\n","import { useState, useEffect } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport axios from 'axios'\r\n\r\nimport UserInfo from \"../components/UserBio/UserInfo\"\r\nimport UserContest from \"../components/UserBio/UserContest\"\r\nimport ProblemVerdict from \"../components/ProblemVerdict/ProblemVerdict\"\r\nimport ProblemLanguage from \"../components/ProblemLanguage/ProblemLanguage\"\r\nimport RatingGraph from \"../components/RatingGraph/RatingGraph\"\r\nimport ProblemTagsGraph from \"../components/ProblemTagsGraph/ProblemTagsGraph\"\r\nimport ProblemRatingGraph from \"../components/ProblemRatingGraph/ProblemRatingGraph\"\r\nimport ProblemIndexGraph from \"../components/ProblemIndexGraph/ProblemIndexGraph\"\r\nimport Footer from '../components/Footer/Footer';\r\nimport './SingleUser.css';\r\n\r\nconst SingleUser = () => {\r\n    let lastName;\r\n\r\n    const [currname, setCurrname] = useState('');\r\n    const [username, setUsername] = useState('');\r\n    const [userInfo, setUserInfo] = useState('');\r\n    const [userContest, setUserContest] = useState('');\r\n    const [userSubmissions, setUserSubmissions] = useState('');\r\n\r\n    const fetchItems = async () => {\r\n        // console.log(currname, username);\r\n\r\n        const resultUI = await axios(`https://codeforces.com/api/user.info?handles=${currname}`);\r\n        let user = resultUI.data.result[0];\r\n        setUserInfo(user);\r\n\r\n\r\n        const resultUC = await axios(`https://codeforces.com/api/user.rating?handle=${currname}`);\r\n        user = resultUC.data.result;\r\n        setUserContest(user);\r\n\r\n\r\n        const resultUS = await axios(`https://codeforces.com/api/user.status?handle=${currname}`)\r\n        user = resultUS.data.result;\r\n        setUserSubmissions(user);\r\n\r\n\r\n    }\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        // console.log(e.target);\r\n        setUsername(currname);\r\n        // console.log(currname, username);\r\n        fetchItems();\r\n        \r\n    }\r\n\r\n    function render() {\r\n        lastName = username;\r\n        // console.log(currname, username, userInfo,lastName);\r\n        \r\n        if (userInfo && username === userInfo.handle) {\r\n\r\n            return (\r\n                <>\r\n\r\n                    <div className=\"user-bio\">\r\n                        <div className=\"user-bio-component\">\r\n                            <UserInfo userInfo={userInfo} username={username} />\r\n                        </div>\r\n                        <div className=\"user-bio-component\">\r\n                            <UserContest userContest={userContest} username={username} />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"graph-components\" >\r\n                        <RatingGraph userContest={userContest} />\r\n                    </div>\r\n\r\n                    <div className=\"pie-chart\">\r\n                        <div className=\"pie-chart-component\" >\r\n                            <ProblemVerdict userSubmissions={userSubmissions} />\r\n                        </div>\r\n                        <div className=\"pie-chart-component\" >\r\n                            <ProblemLanguage userSubmissions={userSubmissions} />\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n\r\n                    <div className=\"graph-components\">\r\n                        <ProblemTagsGraph userSubmissions={userSubmissions} />\r\n                    </div>\r\n                    <div className=\"graph-components\">\r\n                        <ProblemIndexGraph userSubmissions={userSubmissions} />\r\n                    </div>\r\n                    <div className=\"graph-components last\">\r\n                        <ProblemRatingGraph userSubmissions={userSubmissions} />\r\n                    </div>\r\n\r\n                    <Footer />\r\n                </>\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form noValidate autoComplete=\"on\" onSubmit={handleSubmit} className=\"form\" >\r\n                <TextField\r\n                    className=\"text-input\"\r\n                    onChange={(e) => setCurrname(e.target.value)}\r\n                    label=\"Codeforces Username *\"\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                // required\r\n                />\r\n                <Button\r\n                    className=\"btn\"\r\n                    type=\"submit\"\r\n                    color=\"secondary\"\r\n                    variant=\"contained\"\r\n                >\r\n                    Submit\r\n                </Button>\r\n            </form>\r\n            {username !== lastName && render()}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingleUser\r\n","import './App.css';\nimport Header from './components/Header/Header';\nimport Versus from './pages/Versus'\nimport SingleUser from './pages/SingleUser';\n\nimport {BrowserRouter as Router,Switch,Route} from 'react-router-dom';\n\nfunction App() {\n  \n  return (\n    <Router>\n      <Header />\n      <Switch>\n        <Route path=\"/Codeforces-Analyzer/\" exact component={SingleUser} />\n        <Route path=\"/Codeforces-Analyzer/versus\" component={Versus} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}